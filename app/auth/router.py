'''
NOTE:
1.We need MSAL to communicate with Microsoft's authentication servers

2.You want to authenticate your app (or users of your app) using Microsoft Authentication to 
access services like Microsoft Graph API, Azure resources, or other APIs secured by Azure Active Directory (AAD).

3.Using the client , we will get the authorization url which will be used to redirect the user to Microsoft's authentication page.

4.After the user allows the app to access their data , Microsoft will redirect the user to the callback url which is defined in the .env file.

'''

from fastapi import APIRouter,Request,HTTPException
from fastapi.responses import RedirectResponse
from msal import ConfidentialClientApplication
import os
from dotenv import load_dotenv

load_dotenv()
#This is the router for the authentication
router = APIRouter(prefix="/auth")


def get_msal_app():
    '''
    This function helps us create a client which will be used to communicate with Microsoft's authentication servers.
    Using the client , we will get the authorization url which will be used to redirect the user to Microsoft's authentication page.
    '''
    

    tenant_id = os.getenv("MICROSOFT_TENANT_ID")
    authority = f"https://login.microsoftonline.com/{tenant_id}"
    
    return ConfidentialClientApplication(
        client_id=os.getenv("MICROSOFT_CLIENT_ID"),
        authority=authority,  # Use constructed authority
        client_credential=os.getenv("MICROSOFT_CLIENT_SECRET")
    )


@router.get("/login")
async def login():
    try:
        # Fetch the client , using the above client
        client = get_msal_app()
        
        # Get authorization URL , this is dynamically generated by microsoft
        auth_url = client.get_authorization_request_url(
            scopes=["User.Read"],
            redirect_uri=os.getenv("MICROSOFT_REDIRECT_URI")
        )
        
        return RedirectResponse(url=auth_url)
        
    except Exception as e:
        print("Error in login route:", str(e))  # Debug print
        raise HTTPException(status_code=500, detail=str(e))
    
@router.get("/callback")
async def callback(request: Request):
    try:
        # Get authorization code from Microsoft
        code = request.query_params.get("code")
        if not code:
            raise HTTPException(status_code=400, detail="No authorization code received")
            
        # Get Microsoft client
        client = get_msal_app()
        
        # Exchange code for token
        result = client.acquire_token_by_authorization_code(
            code=code,
            scopes=["User.Read"],
            redirect_uri=os.getenv("MICROSOFT_REDIRECT_URI")
        )
        
        # Debug print
        print("Token result:", result)
        
        return result
        
    except Exception as e:
        print("Callback error:", str(e))
        raise HTTPException(status_code=500, detail=str(e))